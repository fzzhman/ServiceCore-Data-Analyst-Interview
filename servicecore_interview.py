# -*- coding: utf-8 -*-
"""ServiceCore Interview

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQo4u_Su_QFOpUIrRq8kach0Egahn5xr
"""

import datetime as dt
import requests
import pandas as pd
!pip install pillow openpyxl
from google.colab import files
from google.colab import drive
drive.mount('/content/drive')

#https://docs.google.com/spreadsheets/d/
#create dataframe of cities and states from City Lat Long Table
sheet_id = '1cIn9lVf7qA4FYDLUG1IKHisipJQbXfzsmGbwXiLgTtE'

df_b = pd.read_csv(f'https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv')

#city and state locations to construct main dataframe with
city_locations = df_b["City"].tolist()
state_locations = df_b["State"].tolist()

#function to get decimal values of lat and long using geocoding from openweather API
#param : name of city
#returns : list containing coordinates of location [lat, lon]

def coordinates(city_name):
  url = 'http://api.openweathermap.org/geo/1.0/direct'
  params = {'q':city_name, 'limit':1, 'appid':'b95f2864783ed6bc5c45030e8e91238d'}
  res = requests.get(url, params=params)
  data = res.json()
  lat_long = []
  lat_long.append(data[-1]["lat"])
  lat_long.append(data[-1]["lon"])
  return lat_long

#function to call weather for location by city name
#param: name of city
#returns : data for each city

def weather(city_name):
  url = 'https://api.openweathermap.org/data/3.0/onecall/overview'
  params = {'lat':coordinates(city_name)[0], 'lon':coordinates(city_name)[1],
            'appid':'b95f2864783ed6bc5c45030e8e91238d','units':'imperial'}
  #params = {'lat':locations[city_name][0], 'lon':locations[city_name][1],
            #'appid':'b95f2864783ed6bc5c45030e8e91238d','units':'imperial'}
  res = requests.get(url,params=params)
  data = res.json()
  del data["tz"] #removing tz from json output
  return data

#function to create list of weather overview of each city
def final_function(city_names:list):
  lst = []
  for i in city_names:
    lst.append(weather(i))

  return lst

#"check" function to create columns for current, feels like, and uv temperature.
#value: city name
#I used a different API for this as I wasn't sure how to parse the AI generated overview
#API Used: OpenWeather Current and Forecasts Weather Data
#documentation: https://openweathermap.org/api/one-call-3#current

def check(city):
  current = []
  feels = []
  uvis = []

  lat_long = coordinates(city)
  url = 'https://api.openweathermap.org/data/3.0/onecall'
  params = {'lat':lat_long[0], 'lon':lat_long[1], 'exclude':"minutely,hourly,alerts.daily", "units":"imperial",
              "appid":'b95f2864783ed6bc5c45030e8e91238d'}
  res = requests.get(url,params=params)
  data=res.json()
  return data["current"]

#Function to convert F to C
#param: temperature in F

def f_to_c(temp):
  new_temp = round(((5/9) * (temp-32)),1)
  return new_temp

#function to add missing data to df
#param : list of cities//dataframe that needs to be updated


def add_missing_vals(cities:list, dataframe):
  current_temps = []
  feels_temps = []
  uvi_list = []
  for i in cities:
    current_temps.append(check(i)["temp"])
    feels_temps.append(check(i)["feels_like"])
    uvi_list.append(check(i)["uvi"])

  dataframe["current temp"] = current_temps
  dataframe["feels like temp"] = feels_temps
  dataframe["UV Index"] = uvi_list
  dataframe["City Name"] = city_locations
  dataframe["State Name"] = state_locations
  dataframe['current temp celcius'] = dataframe['current temp'].apply(f_to_c)
  dataframe['feels like temp celcius'] = dataframe['feels like temp'].apply(f_to_c)
  return dataframe

def _main(city_locations):
  df = pd.DataFrame(final_function(city_locations))
  add_missing_vals(city_locations,df)
  df.to_excel("service_core_output.xlsx")
  print(df)

_main(city_locations)